// Code generated by protoc-gen-go. DO NOT EDIT.
// source: robot.proto

package robot // import "github.com/evgeniy-scherbina/hard_and_soft/robot"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_robot_0ec790d2155654b6, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type EnvironmentInfo struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	EnvironmentTemp      float32  `protobuf:"fixed32,2,opt,name=EnvironmentTemp,proto3" json:"EnvironmentTemp,omitempty"`
	AtmospherePressure   int64    `protobuf:"varint,3,opt,name=AtmospherePressure,proto3" json:"AtmospherePressure,omitempty"`
	Altitude             float32  `protobuf:"fixed32,4,opt,name=Altitude,proto3" json:"Altitude,omitempty"`
	Humidity             uint32   `protobuf:"varint,5,opt,name=Humidity,proto3" json:"Humidity,omitempty"`
	RobotBatteryLvl      uint32   `protobuf:"varint,6,opt,name=RobotBatteryLvl,proto3" json:"RobotBatteryLvl,omitempty"`
	Brightness           uint32   `protobuf:"varint,7,opt,name=Brightness,proto3" json:"Brightness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvironmentInfo) Reset()         { *m = EnvironmentInfo{} }
func (m *EnvironmentInfo) String() string { return proto.CompactTextString(m) }
func (*EnvironmentInfo) ProtoMessage()    {}
func (*EnvironmentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_robot_0ec790d2155654b6, []int{1}
}
func (m *EnvironmentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentInfo.Unmarshal(m, b)
}
func (m *EnvironmentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentInfo.Marshal(b, m, deterministic)
}
func (dst *EnvironmentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentInfo.Merge(dst, src)
}
func (m *EnvironmentInfo) XXX_Size() int {
	return xxx_messageInfo_EnvironmentInfo.Size(m)
}
func (m *EnvironmentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentInfo proto.InternalMessageInfo

func (m *EnvironmentInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EnvironmentInfo) GetEnvironmentTemp() float32 {
	if m != nil {
		return m.EnvironmentTemp
	}
	return 0
}

func (m *EnvironmentInfo) GetAtmospherePressure() int64 {
	if m != nil {
		return m.AtmospherePressure
	}
	return 0
}

func (m *EnvironmentInfo) GetAltitude() float32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *EnvironmentInfo) GetHumidity() uint32 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

func (m *EnvironmentInfo) GetRobotBatteryLvl() uint32 {
	if m != nil {
		return m.RobotBatteryLvl
	}
	return 0
}

func (m *EnvironmentInfo) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type HumanHeartInfo struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	HeartRate            uint32   `protobuf:"varint,2,opt,name=HeartRate,proto3" json:"HeartRate,omitempty"`
	HeartRhythm          float32  `protobuf:"fixed32,3,opt,name=HeartRhythm,proto3" json:"HeartRhythm,omitempty"`
	DeviceBatteryLvl     uint32   `protobuf:"varint,4,opt,name=DeviceBatteryLvl,proto3" json:"DeviceBatteryLvl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HumanHeartInfo) Reset()         { *m = HumanHeartInfo{} }
func (m *HumanHeartInfo) String() string { return proto.CompactTextString(m) }
func (*HumanHeartInfo) ProtoMessage()    {}
func (*HumanHeartInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_robot_0ec790d2155654b6, []int{2}
}
func (m *HumanHeartInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HumanHeartInfo.Unmarshal(m, b)
}
func (m *HumanHeartInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HumanHeartInfo.Marshal(b, m, deterministic)
}
func (dst *HumanHeartInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HumanHeartInfo.Merge(dst, src)
}
func (m *HumanHeartInfo) XXX_Size() int {
	return xxx_messageInfo_HumanHeartInfo.Size(m)
}
func (m *HumanHeartInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HumanHeartInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HumanHeartInfo proto.InternalMessageInfo

func (m *HumanHeartInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HumanHeartInfo) GetHeartRate() uint32 {
	if m != nil {
		return m.HeartRate
	}
	return 0
}

func (m *HumanHeartInfo) GetHeartRhythm() float32 {
	if m != nil {
		return m.HeartRhythm
	}
	return 0
}

func (m *HumanHeartInfo) GetDeviceBatteryLvl() uint32 {
	if m != nil {
		return m.DeviceBatteryLvl
	}
	return 0
}

type HumanCommonInfo struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Humidity             uint32   `protobuf:"varint,2,opt,name=Humidity,proto3" json:"Humidity,omitempty"`
	Temp                 float32  `protobuf:"fixed32,3,opt,name=Temp,proto3" json:"Temp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HumanCommonInfo) Reset()         { *m = HumanCommonInfo{} }
func (m *HumanCommonInfo) String() string { return proto.CompactTextString(m) }
func (*HumanCommonInfo) ProtoMessage()    {}
func (*HumanCommonInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_robot_0ec790d2155654b6, []int{3}
}
func (m *HumanCommonInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HumanCommonInfo.Unmarshal(m, b)
}
func (m *HumanCommonInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HumanCommonInfo.Marshal(b, m, deterministic)
}
func (dst *HumanCommonInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HumanCommonInfo.Merge(dst, src)
}
func (m *HumanCommonInfo) XXX_Size() int {
	return xxx_messageInfo_HumanCommonInfo.Size(m)
}
func (m *HumanCommonInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HumanCommonInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HumanCommonInfo proto.InternalMessageInfo

func (m *HumanCommonInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HumanCommonInfo) GetHumidity() uint32 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

func (m *HumanCommonInfo) GetTemp() float32 {
	if m != nil {
		return m.Temp
	}
	return 0
}

type FlowerpotInfo struct {
	PouredOn             bool     `protobuf:"varint,1,opt,name=PouredOn,proto3" json:"PouredOn,omitempty"`
	Humidity             uint32   `protobuf:"varint,2,opt,name=Humidity,proto3" json:"Humidity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowerpotInfo) Reset()         { *m = FlowerpotInfo{} }
func (m *FlowerpotInfo) String() string { return proto.CompactTextString(m) }
func (*FlowerpotInfo) ProtoMessage()    {}
func (*FlowerpotInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_robot_0ec790d2155654b6, []int{4}
}
func (m *FlowerpotInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowerpotInfo.Unmarshal(m, b)
}
func (m *FlowerpotInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowerpotInfo.Marshal(b, m, deterministic)
}
func (dst *FlowerpotInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowerpotInfo.Merge(dst, src)
}
func (m *FlowerpotInfo) XXX_Size() int {
	return xxx_messageInfo_FlowerpotInfo.Size(m)
}
func (m *FlowerpotInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowerpotInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FlowerpotInfo proto.InternalMessageInfo

func (m *FlowerpotInfo) GetPouredOn() bool {
	if m != nil {
		return m.PouredOn
	}
	return false
}

func (m *FlowerpotInfo) GetHumidity() uint32 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "robot.Empty")
	proto.RegisterType((*EnvironmentInfo)(nil), "robot.EnvironmentInfo")
	proto.RegisterType((*HumanHeartInfo)(nil), "robot.HumanHeartInfo")
	proto.RegisterType((*HumanCommonInfo)(nil), "robot.HumanCommonInfo")
	proto.RegisterType((*FlowerpotInfo)(nil), "robot.FlowerpotInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RobotServiceClient is the client API for RobotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RobotServiceClient interface {
	PutEnvironmentInfo(ctx context.Context, in *EnvironmentInfo, opts ...grpc.CallOption) (*Empty, error)
	PutHumanHeartInfo(ctx context.Context, in *HumanHeartInfo, opts ...grpc.CallOption) (*Empty, error)
	PutHumanCommonInfo(ctx context.Context, in *HumanCommonInfo, opts ...grpc.CallOption) (*Empty, error)
	PutFlowerpotInfo(ctx context.Context, in *FlowerpotInfo, opts ...grpc.CallOption) (*Empty, error)
}

type robotServiceClient struct {
	cc *grpc.ClientConn
}

func NewRobotServiceClient(cc *grpc.ClientConn) RobotServiceClient {
	return &robotServiceClient{cc}
}

func (c *robotServiceClient) PutEnvironmentInfo(ctx context.Context, in *EnvironmentInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/robot.RobotService/PutEnvironmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) PutHumanHeartInfo(ctx context.Context, in *HumanHeartInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/robot.RobotService/PutHumanHeartInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) PutHumanCommonInfo(ctx context.Context, in *HumanCommonInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/robot.RobotService/PutHumanCommonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotServiceClient) PutFlowerpotInfo(ctx context.Context, in *FlowerpotInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/robot.RobotService/PutFlowerpotInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotServiceServer is the server API for RobotService service.
type RobotServiceServer interface {
	PutEnvironmentInfo(context.Context, *EnvironmentInfo) (*Empty, error)
	PutHumanHeartInfo(context.Context, *HumanHeartInfo) (*Empty, error)
	PutHumanCommonInfo(context.Context, *HumanCommonInfo) (*Empty, error)
	PutFlowerpotInfo(context.Context, *FlowerpotInfo) (*Empty, error)
}

func RegisterRobotServiceServer(s *grpc.Server, srv RobotServiceServer) {
	s.RegisterService(&_RobotService_serviceDesc, srv)
}

func _RobotService_PutEnvironmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).PutEnvironmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.RobotService/PutEnvironmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).PutEnvironmentInfo(ctx, req.(*EnvironmentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_PutHumanHeartInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanHeartInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).PutHumanHeartInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.RobotService/PutHumanHeartInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).PutHumanHeartInfo(ctx, req.(*HumanHeartInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_PutHumanCommonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanCommonInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).PutHumanCommonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.RobotService/PutHumanCommonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).PutHumanCommonInfo(ctx, req.(*HumanCommonInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotService_PutFlowerpotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowerpotInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServiceServer).PutFlowerpotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.RobotService/PutFlowerpotInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServiceServer).PutFlowerpotInfo(ctx, req.(*FlowerpotInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _RobotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "robot.RobotService",
	HandlerType: (*RobotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutEnvironmentInfo",
			Handler:    _RobotService_PutEnvironmentInfo_Handler,
		},
		{
			MethodName: "PutHumanHeartInfo",
			Handler:    _RobotService_PutHumanHeartInfo_Handler,
		},
		{
			MethodName: "PutHumanCommonInfo",
			Handler:    _RobotService_PutHumanCommonInfo_Handler,
		},
		{
			MethodName: "PutFlowerpotInfo",
			Handler:    _RobotService_PutFlowerpotInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "robot.proto",
}

func init() { proto.RegisterFile("robot.proto", fileDescriptor_robot_0ec790d2155654b6) }

var fileDescriptor_robot_0ec790d2155654b6 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb1, 0x9b, 0xb4, 0x61, 0xda, 0xb4, 0x65, 0x05, 0x95, 0x15, 0x21, 0x64, 0xf9, 0x64,
	0x21, 0x91, 0xa0, 0x72, 0x41, 0x88, 0x4b, 0x03, 0x85, 0x44, 0x42, 0xc2, 0x2c, 0x9c, 0xb8, 0x54,
	0x4e, 0x3c, 0x8d, 0x57, 0xca, 0xee, 0x5a, 0xeb, 0xd9, 0x20, 0xdf, 0x78, 0x00, 0x5e, 0x19, 0x09,
	0x65, 0x5d, 0x52, 0xc7, 0x89, 0x7a, 0xf3, 0xfc, 0xe6, 0x8f, 0xbf, 0xf9, 0x3c, 0x86, 0x63, 0xa3,
	0x67, 0x9a, 0x86, 0x85, 0xd1, 0xa4, 0x59, 0xd7, 0x05, 0xd1, 0x11, 0x74, 0xaf, 0x65, 0x41, 0x55,
	0xf4, 0xd7, 0x83, 0xb3, 0x6b, 0xb5, 0x12, 0x46, 0x2b, 0x89, 0x8a, 0xa6, 0xea, 0x56, 0xb3, 0x53,
	0xf0, 0xa7, 0x59, 0xe0, 0x85, 0x5e, 0xdc, 0xe1, 0xfe, 0x34, 0x63, 0xf1, 0x56, 0xc9, 0x0f, 0x94,
	0x45, 0xe0, 0x87, 0x5e, 0xec, 0xf3, 0x36, 0x66, 0x43, 0x60, 0x57, 0x24, 0x75, 0x59, 0xe4, 0x68,
	0x30, 0x31, 0x58, 0x96, 0xd6, 0x60, 0x70, 0x10, 0x7a, 0xf1, 0x01, 0xdf, 0x93, 0x61, 0x03, 0xe8,
	0x5d, 0x2d, 0x49, 0x90, 0xcd, 0x30, 0xe8, 0xb8, 0x91, 0x9b, 0x78, 0x9d, 0x9b, 0x58, 0x29, 0x32,
	0x41, 0x55, 0xd0, 0x0d, 0xbd, 0xb8, 0xcf, 0x37, 0xf1, 0x5a, 0x11, 0x5f, 0xef, 0x31, 0x4e, 0x89,
	0xd0, 0x54, 0x5f, 0x56, 0xcb, 0xe0, 0xd0, 0x95, 0xb4, 0x31, 0x7b, 0x01, 0x30, 0x36, 0x62, 0x91,
	0x93, 0xc2, 0xb2, 0x0c, 0x8e, 0x5c, 0x51, 0x83, 0x44, 0x7f, 0x3c, 0x38, 0x9d, 0x58, 0x99, 0xaa,
	0x09, 0xa6, 0x66, 0xff, 0xfa, 0xcf, 0xe1, 0xb1, 0x4b, 0xf2, 0x94, 0xd0, 0x2d, 0xde, 0xe7, 0xf7,
	0x80, 0x85, 0x70, 0x5c, 0x07, 0x79, 0x45, 0xb9, 0x74, 0xbb, 0xfa, 0xbc, 0x89, 0xd8, 0x4b, 0x38,
	0xff, 0x88, 0x2b, 0x31, 0xc7, 0x86, 0xda, 0x8e, 0x1b, 0xb3, 0xc3, 0xa3, 0x6f, 0x70, 0xe6, 0xd4,
	0x7c, 0xd0, 0x52, 0x6a, 0xb5, 0x57, 0x4e, 0xd3, 0x17, 0xbf, 0xe5, 0x0b, 0x83, 0x8e, 0xfb, 0x3c,
	0xb5, 0x0a, 0xf7, 0x1c, 0x7d, 0x86, 0xfe, 0xa7, 0xa5, 0xfe, 0x85, 0xa6, 0xd0, 0xf5, 0x7e, 0x03,
	0xe8, 0x25, 0xda, 0x1a, 0xcc, 0xbe, 0x2a, 0x37, 0xb6, 0xc7, 0x37, 0xf1, 0x43, 0xc3, 0x2f, 0x7f,
	0xfb, 0x70, 0xe2, 0xec, 0xfd, 0x8e, 0x66, 0x2d, 0x9b, 0xbd, 0x07, 0x96, 0x58, 0x6a, 0x5f, 0xcf,
	0xc5, 0xb0, 0xbe, 0xb7, 0x16, 0x1f, 0x9c, 0xfc, 0xe7, 0xee, 0xee, 0x1e, 0xb1, 0x77, 0xf0, 0x24,
	0xb1, 0xd4, 0xf2, 0xfe, 0xd9, 0x5d, 0xd1, 0x36, 0xde, 0xe9, 0xad, 0xdf, 0xdc, 0x76, 0xea, 0xa2,
	0xd9, 0x7c, 0xcf, 0x77, 0xba, 0xdf, 0xc2, 0x79, 0x62, 0x69, 0xdb, 0x94, 0xa7, 0x77, 0x35, 0x5b,
	0xb4, 0xdd, 0x39, 0xbe, 0xfc, 0xf9, 0x7a, 0x21, 0x28, 0xb7, 0xb3, 0xe1, 0x5c, 0xcb, 0x11, 0xae,
	0x16, 0xa8, 0x44, 0xf5, 0xaa, 0x9c, 0xe7, 0x68, 0x66, 0x42, 0xa5, 0xa3, 0x3c, 0x35, 0xd9, 0x4d,
	0xaa, 0xb2, 0x9b, 0x52, 0xdf, 0xd2, 0xc8, 0xf5, 0xce, 0x0e, 0xdd, 0x8f, 0xf7, 0xe6, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x86, 0xc9, 0x78, 0x10, 0x87, 0x03, 0x00, 0x00,
}
